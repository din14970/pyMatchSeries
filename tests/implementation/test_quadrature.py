import numpy as np
import pytest
from math import prod
from pymatchseries.implementation.quadrature import (
    Quadrature2D,
    evaluate_at_quad_points_cpu,
    evaluate_pd_on_quad_points_cpu,
)
from pymatchseries.utils import CUPY_IS_INSTALLED, cp


RTOL = 1e-6


if CUPY_IS_INSTALLED:
    params = [
        Quadrature2D((7, 8), 2, np),
        Quadrature2D((4, 5), 3, np),
        Quadrature2D((7, 8), 2, cp),
        Quadrature2D((4, 5), 3, cp),
    ]
else:
    params = [
        Quadrature2D((7, 8), 2, np),
        Quadrature2D((4, 5), 3, np),
    ]


@pytest.mark.parametrize("quad", params)
class TestQuadrature:
    """Simply tests whether we get the right array shapes from all functions"""

    def test_evaluate(self, quad: Quadrature2D) -> None:
        dp = quad.dispatcher
        image = dp.random.rand(*quad.grid_shape).astype(dp.float32)
        result = quad.evaluate(image)
        expected_shape = (
            image.shape[0] - 1,
            image.shape[1] - 1,
            quad.number_of_quadrature_points,
        )
        assert result.shape == expected_shape

    def test_evaluate_partial_derivatives(self, quad: Quadrature2D) -> None:
        dp = quad.dispatcher
        shape = quad.cell_grid_shape
        quad_values = dp.random.rand(*shape).astype(dp.float32)
        node_weights = dp.random.rand(4, quad.number_of_quadrature_points).astype(
            dp.float32
        )
        result = quad.evaluate_partial_derivatives(quad_values, node_weights)
        expected_shape = (quad.total_number_of_quadrature_points * 4,)
        assert len(result) == 3
        assert result[0].shape == expected_shape
        assert result[1].shape == expected_shape
        assert result[2].shape == expected_shape

    def test_quadrature_points(self, quad: Quadrature2D) -> None:
        points = quad.quadrature_points
        assert points.shape == (quad.number_of_quadrature_points, 2)

    def test_quadrature_points_weights(self, quad: Quadrature2D) -> None:
        weights = quad.quadrature_point_weights
        assert weights.shape == (quad.number_of_quadrature_points,)

    def test_quadrature_points_weights_sqrt(self, quad: Quadrature2D) -> None:
        weights = quad.quadrature_point_weights_sqrt
        assert weights.shape == (quad.number_of_quadrature_points,)

    def test_quadrature_points_x_coordinate(self, quad: Quadrature2D) -> None:
        points = quad.quadrature_points_x_coordinate
        assert points.shape == (quad.number_of_quadrature_points,)

    def test_quadrature_points_y_coordinate(self, quad: Quadrature2D) -> None:
        points = quad.quadrature_points_y_coordinate
        assert points.shape == (quad.number_of_quadrature_points,)

    def test_node_weights(self, quad: Quadrature2D) -> None:
        node_weights = quad.node_weights
        assert node_weights.shape == (4, quad.number_of_quadrature_points)

    def test_basis_f_at_points(self, quad: Quadrature2D) -> None:
        basis_f = quad.basis_f_at_points
        assert basis_f.shape == (4, quad.number_of_quadrature_points)

    def test_dx_node_weights(self, quad: Quadrature2D) -> None:
        values = quad.dx_node_weights
        assert values.shape == (4, quad.number_of_quadrature_points)

    def test_dy_node_weights(self, quad: Quadrature2D) -> None:
        values = quad.dy_node_weights
        assert values.shape == (4, quad.number_of_quadrature_points)

    def test_basis_dfx_at_points(self, quad: Quadrature2D) -> None:
        values = quad.basis_dfx_at_points
        assert values.shape == (4, quad.number_of_quadrature_points)

    def test_basis_dfy_at_points(self, quad: Quadrature2D) -> None:
        values = quad.basis_dfy_at_points
        assert values.shape == (4, quad.number_of_quadrature_points)


def test_evaluate_at_quad_points_cpu() -> None:
    image = np.array(
        [
            [5, 9, 5, 3, 3],
            [2, 1, 8, 0, 0],
            [5, 7, 7, 3, 0],
            [5, 7, 7, 3, 0],
            [2, 1, 8, 0, 0],
            [5, 2, 9, 2, 8],
        ]
    ).astype(np.float32)
    node_weights = (
        np.array(
            [
                [4, 8, 4, 3, 7, 6, 7, 9, 9, 6, 3],
                [7, 3, 8, 9, 9, 3, 9, 3, 1, 5, 7],
                [7, 2, 6, 6, 1, 4, 2, 8, 7, 5, 8],
                [4, 4, 6, 9, 4, 9, 0, 3, 0, 6, 4],
            ]
        ).astype(np.float32)
        / 20
    )

    result = evaluate_at_quad_points_cpu(image, node_weights)
    expected = np.array(
        [
            5.049999,
            3.75,
            5.5000005,
            5.8499994,
            6.0999994,
            3.7,
            5.9999995,
            4.55,
            3.4,
            4.55,
            4.8999996,
            5.5,
            6.05,
            6.5000005,
            7.5,
            7.0499997,
            7.25,
            5.4999995,
            6.3999996,
            4.6499996,
            6.6,
            5.1,
            4.85,
            3.25,
            4.6000004,
            4.5,
            3.5,
            3.5500002,
            3.8999999,
            5.9,
            5.2,
            4.25,
            5.0,
            1.65,
            1.6500001,
            1.8000001,
            1.8,
            2.3999999,
            1.35,
            2.3999999,
            1.8,
            1.4999999,
            1.6500001,
            1.5,
            3.9,
            2.85,
            4.4,
            5.3999996,
            2.8,
            4.8999996,
            1.65,
            4.1,
            2.7,
            4.2,
            4.05,
            6.85,
            3.6999998,
            7.6000004,
            9.0,
            5.7,
            6.05,
            4.6499996,
            5.5,
            3.3000002,
            6.1500006,
            7.15,
            4.65,
            4.5,
            4.6000004,
            4.65,
            3.75,
            5.15,
            3.5,
            6.8499994,
            6.05,
            5.05,
            4.6,
            1.05,
            0.3,
            0.90000004,
            0.90000004,
            0.15,
            0.6,
            0.3,
            1.2,
            1.05,
            0.75,
            1.2,
            6.6,
            4.9500003,
            7.4000006,
            8.549999,
            6.5499997,
            6.7,
            5.3999996,
            6.3500004,
            4.35,
            6.6000004,
            6.6,
            7.7000003,
            5.95,
            8.400001,
            9.45,
            7.35,
            7.7,
            6.2999997,
            8.05,
            5.95,
            7.700001,
            7.7000003,
            5.4999995,
            4.55,
            5.6,
            5.85,
            4.75,
            5.3,
            4.5,
            6.8499994,
            5.75,
            5.5000005,
            5.4999995,
            1.65,
            1.5,
            1.5,
            1.35,
            1.1999999,
            1.5,
            1.3499999,
            2.55,
            2.3999999,
            1.6500001,
            1.6500001,
            4.35,
            3.4500003,
            4.7000003,
            4.95,
            5.1999993,
            3.4000003,
            5.0999994,
            4.2500005,
            3.3,
            4.05,
            4.2,
            5.7999997,
            5.5499997,
            6.9,
            8.1,
            7.25,
            6.95,
            5.7,
            5.8,
            3.8499997,
            6.5000005,
            5.5,
            5.25,
            4.05,
            5.0,
            4.8,
            4.2,
            4.15,
            4.6,
            6.8,
            6.1,
            4.8500004,
            5.3,
            0.6,
            1.2,
            0.6,
            0.45000002,
            1.05,
            0.90000004,
            1.05,
            1.3499999,
            1.3499999,
            0.90000004,
            0.45000002,
            2.9,
            1.85,
            2.9,
            3.15,
            1.8,
            2.65,
            1.65,
            3.35,
            2.7,
            2.6999998,
            3.0500002,
            5.5,
            3.6000001,
            6.7,
            8.4,
            5.85,
            5.95,
            4.1499996,
            3.8000002,
            1.55,
            5.5,
            5.55,
            5.15,
            4.5,
            4.9,
            4.8,
            3.65,
            5.1000004,
            3.7,
            7.5,
            6.75,
            5.25,
            5.2000003,
            2.3,
            1.8000001,
            3.0,
            4.2,
            1.7,
            4.0,
            0.2,
            2.0,
            0.7,
            2.9,
            2.4,
        ]
    ).astype(np.float32)

    expected_shape = (image.shape[0] - 1, image.shape[1] - 1, node_weights.shape[1])
    assert result.shape == expected_shape
    np.testing.assert_allclose(result.ravel(), expected, rtol=RTOL)


def test_evaluate_pd_at_quad_points_cpu() -> None:
    # (N - 1) = 4
    # (M - 1) = 5
    # K = 6
    quadrature_values = np.array(
        [
            [
                [9, 5, 1, 8, 6, 1],
                [5, 1, 7, 2, 1, 1],
                [2, 9, 1, 2, 6, 0],
                [5, 1, 0, 4, 6, 8],
                [5, 4, 1, 7, 4, 9],
            ],
            [
                [6, 2, 1, 1, 8, 4],
                [1, 3, 0, 4, 1, 2],
                [5, 1, 0, 0, 7, 1],
                [6, 5, 1, 2, 8, 0],
                [5, 4, 5, 3, 9, 2],
            ],
            [
                [0, 9, 3, 2, 6, 4],
                [2, 2, 6, 8, 8, 5],
                [6, 7, 1, 2, 2, 6],
                [4, 3, 3, 5, 9, 7],
                [3, 7, 0, 1, 8, 5],
            ],
            [
                [2, 5, 2, 2, 9, 8],
                [7, 0, 2, 8, 4, 6],
                [2, 6, 9, 3, 8, 8],
                [1, 8, 8, 5, 5, 9],
                [5, 9, 8, 7, 2, 6],
            ],
        ]
    ).astype(np.float32)
    quad_weights_sqrt = np.array([0, 4, 2, 1, 3, 8]).astype(np.float32)
    node_weights = np.array(
        [[5, 1, 3, 4, 7, 4], [2, 7, 4, 0, 9, 5], [3, 1, 3, 8, 2, 3], [8, 0, 0, 8, 6, 5]]
    ).astype(np.float32)

    data, rows, cols = evaluate_pd_on_quad_points_cpu(
        quadrature_values, quad_weights_sqrt, node_weights
    )

    expected_shape = (4 * prod(quadrature_values.shape),)
    assert data.shape == expected_shape
    assert rows.shape == expected_shape
    assert cols.shape == expected_shape

    data_expected = np.array(
        [
            0.0,
            0.0,
            0.0,
            0.0,
            20.0,
            140.0,
            20.0,
            0.0,
            6.0,
            8.0,
            6.0,
            0.0,
            32.0,
            0.0,
            64.0,
            64.0,
            126.0,
            162.0,
            36.0,
            108.0,
            32.0,
            40.0,
            24.0,
            40.0,
            0.0,
            0.0,
            0.0,
            0.0,
            4.0,
            28.0,
            4.0,
            0.0,
            42.0,
            56.0,
            42.0,
            0.0,
            8.0,
            0.0,
            16.0,
            16.0,
            21.0,
            27.0,
            6.0,
            18.0,
            32.0,
            40.0,
            24.0,
            40.0,
            0.0,
            0.0,
            0.0,
            0.0,
            36.0,
            252.0,
            36.0,
            0.0,
            6.0,
            8.0,
            6.0,
            0.0,
            8.0,
            0.0,
            16.0,
            16.0,
            126.0,
            162.0,
            36.0,
            108.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            4.0,
            28.0,
            4.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            16.0,
            0.0,
            32.0,
            32.0,
            126.0,
            162.0,
            36.0,
            108.0,
            256.0,
            320.0,
            192.0,
            320.0,
            0.0,
            0.0,
            0.0,
            0.0,
            16.0,
            112.0,
            16.0,
            0.0,
            6.0,
            8.0,
            6.0,
            0.0,
            28.0,
            0.0,
            56.0,
            56.0,
            84.0,
            108.0,
            24.0,
            72.0,
            288.0,
            360.0,
            216.0,
            360.0,
            0.0,
            0.0,
            0.0,
            0.0,
            8.0,
            56.0,
            8.0,
            0.0,
            6.0,
            8.0,
            6.0,
            0.0,
            4.0,
            0.0,
            8.0,
            8.0,
            168.0,
            216.0,
            48.0,
            144.0,
            128.0,
            160.0,
            96.0,
            160.0,
            0.0,
            0.0,
            0.0,
            0.0,
            12.0,
            84.0,
            12.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            16.0,
            0.0,
            32.0,
            32.0,
            21.0,
            27.0,
            6.0,
            18.0,
            64.0,
            80.0,
            48.0,
            80.0,
            0.0,
            0.0,
            0.0,
            0.0,
            4.0,
            28.0,
            4.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            147.0,
            189.0,
            42.0,
            126.0,
            32.0,
            40.0,
            24.0,
            40.0,
            0.0,
            0.0,
            0.0,
            0.0,
            20.0,
            140.0,
            20.0,
            0.0,
            6.0,
            8.0,
            6.0,
            0.0,
            8.0,
            0.0,
            16.0,
            16.0,
            168.0,
            216.0,
            48.0,
            144.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            16.0,
            112.0,
            16.0,
            0.0,
            30.0,
            40.0,
            30.0,
            0.0,
            12.0,
            0.0,
            24.0,
            24.0,
            189.0,
            243.0,
            54.0,
            162.0,
            64.0,
            80.0,
            48.0,
            80.0,
            0.0,
            0.0,
            0.0,
            0.0,
            36.0,
            252.0,
            36.0,
            0.0,
            18.0,
            24.0,
            18.0,
            0.0,
            8.0,
            0.0,
            16.0,
            16.0,
            126.0,
            162.0,
            36.0,
            108.0,
            128.0,
            160.0,
            96.0,
            160.0,
            0.0,
            0.0,
            0.0,
            0.0,
            8.0,
            56.0,
            8.0,
            0.0,
            36.0,
            48.0,
            36.0,
            0.0,
            32.0,
            0.0,
            64.0,
            64.0,
            168.0,
            216.0,
            48.0,
            144.0,
            160.0,
            200.0,
            120.0,
            200.0,
            0.0,
            0.0,
            0.0,
            0.0,
            28.0,
            196.0,
            28.0,
            0.0,
            6.0,
            8.0,
            6.0,
            0.0,
            8.0,
            0.0,
            16.0,
            16.0,
            42.0,
            54.0,
            12.0,
            36.0,
            192.0,
            240.0,
            144.0,
            240.0,
            0.0,
            0.0,
            0.0,
            0.0,
            12.0,
            84.0,
            12.0,
            0.0,
            18.0,
            24.0,
            18.0,
            0.0,
            20.0,
            0.0,
            40.0,
            40.0,
            189.0,
            243.0,
            54.0,
            162.0,
            224.0,
            280.0,
            168.0,
            280.0,
            0.0,
            0.0,
            0.0,
            0.0,
            28.0,
            196.0,
            28.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            4.0,
            0.0,
            8.0,
            8.0,
            168.0,
            216.0,
            48.0,
            144.0,
            160.0,
            200.0,
            120.0,
            200.0,
            0.0,
            0.0,
            0.0,
            0.0,
            20.0,
            140.0,
            20.0,
            0.0,
            12.0,
            16.0,
            12.0,
            0.0,
            8.0,
            0.0,
            16.0,
            16.0,
            189.0,
            243.0,
            54.0,
            162.0,
            256.0,
            320.0,
            192.0,
            320.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            12.0,
            16.0,
            12.0,
            0.0,
            32.0,
            0.0,
            64.0,
            64.0,
            84.0,
            108.0,
            24.0,
            72.0,
            192.0,
            240.0,
            144.0,
            240.0,
            0.0,
            0.0,
            0.0,
            0.0,
            24.0,
            168.0,
            24.0,
            0.0,
            54.0,
            72.0,
            54.0,
            0.0,
            12.0,
            0.0,
            24.0,
            24.0,
            168.0,
            216.0,
            48.0,
            144.0,
            256.0,
            320.0,
            192.0,
            320.0,
            0.0,
            0.0,
            0.0,
            0.0,
            32.0,
            224.0,
            32.0,
            0.0,
            48.0,
            64.0,
            48.0,
            0.0,
            20.0,
            0.0,
            40.0,
            40.0,
            105.0,
            135.0,
            30.0,
            90.0,
            288.0,
            360.0,
            216.0,
            360.0,
            0.0,
            0.0,
            0.0,
            0.0,
            36.0,
            252.0,
            36.0,
            0.0,
            48.0,
            64.0,
            48.0,
            0.0,
            28.0,
            0.0,
            56.0,
            56.0,
            42.0,
            54.0,
            12.0,
            36.0,
            192.0,
            240.0,
            144.0,
            240.0,
        ],
        dtype=np.float32,
    )

    rows_expected = np.array(
        [
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            1.0,
            1.0,
            2.0,
            2.0,
            2.0,
            2.0,
            3.0,
            3.0,
            3.0,
            3.0,
            4.0,
            4.0,
            4.0,
            4.0,
            5.0,
            5.0,
            5.0,
            5.0,
            6.0,
            6.0,
            6.0,
            6.0,
            7.0,
            7.0,
            7.0,
            7.0,
            8.0,
            8.0,
            8.0,
            8.0,
            9.0,
            9.0,
            9.0,
            9.0,
            10.0,
            10.0,
            10.0,
            10.0,
            11.0,
            11.0,
            11.0,
            11.0,
            12.0,
            12.0,
            12.0,
            12.0,
            13.0,
            13.0,
            13.0,
            13.0,
            14.0,
            14.0,
            14.0,
            14.0,
            15.0,
            15.0,
            15.0,
            15.0,
            16.0,
            16.0,
            16.0,
            16.0,
            17.0,
            17.0,
            17.0,
            17.0,
            18.0,
            18.0,
            18.0,
            18.0,
            19.0,
            19.0,
            19.0,
            19.0,
            20.0,
            20.0,
            20.0,
            20.0,
            21.0,
            21.0,
            21.0,
            21.0,
            22.0,
            22.0,
            22.0,
            22.0,
            23.0,
            23.0,
            23.0,
            23.0,
            24.0,
            24.0,
            24.0,
            24.0,
            25.0,
            25.0,
            25.0,
            25.0,
            26.0,
            26.0,
            26.0,
            26.0,
            27.0,
            27.0,
            27.0,
            27.0,
            28.0,
            28.0,
            28.0,
            28.0,
            29.0,
            29.0,
            29.0,
            29.0,
            30.0,
            30.0,
            30.0,
            30.0,
            31.0,
            31.0,
            31.0,
            31.0,
            32.0,
            32.0,
            32.0,
            32.0,
            33.0,
            33.0,
            33.0,
            33.0,
            34.0,
            34.0,
            34.0,
            34.0,
            35.0,
            35.0,
            35.0,
            35.0,
            36.0,
            36.0,
            36.0,
            36.0,
            37.0,
            37.0,
            37.0,
            37.0,
            38.0,
            38.0,
            38.0,
            38.0,
            39.0,
            39.0,
            39.0,
            39.0,
            40.0,
            40.0,
            40.0,
            40.0,
            41.0,
            41.0,
            41.0,
            41.0,
            42.0,
            42.0,
            42.0,
            42.0,
            43.0,
            43.0,
            43.0,
            43.0,
            44.0,
            44.0,
            44.0,
            44.0,
            45.0,
            45.0,
            45.0,
            45.0,
            46.0,
            46.0,
            46.0,
            46.0,
            47.0,
            47.0,
            47.0,
            47.0,
            48.0,
            48.0,
            48.0,
            48.0,
            49.0,
            49.0,
            49.0,
            49.0,
            50.0,
            50.0,
            50.0,
            50.0,
            51.0,
            51.0,
            51.0,
            51.0,
            52.0,
            52.0,
            52.0,
            52.0,
            53.0,
            53.0,
            53.0,
            53.0,
            54.0,
            54.0,
            54.0,
            54.0,
            55.0,
            55.0,
            55.0,
            55.0,
            56.0,
            56.0,
            56.0,
            56.0,
            57.0,
            57.0,
            57.0,
            57.0,
            58.0,
            58.0,
            58.0,
            58.0,
            59.0,
            59.0,
            59.0,
            59.0,
            60.0,
            60.0,
            60.0,
            60.0,
            61.0,
            61.0,
            61.0,
            61.0,
            62.0,
            62.0,
            62.0,
            62.0,
            63.0,
            63.0,
            63.0,
            63.0,
            64.0,
            64.0,
            64.0,
            64.0,
            65.0,
            65.0,
            65.0,
            65.0,
            66.0,
            66.0,
            66.0,
            66.0,
            67.0,
            67.0,
            67.0,
            67.0,
            68.0,
            68.0,
            68.0,
            68.0,
            69.0,
            69.0,
            69.0,
            69.0,
            70.0,
            70.0,
            70.0,
            70.0,
            71.0,
            71.0,
            71.0,
            71.0,
            72.0,
            72.0,
            72.0,
            72.0,
            73.0,
            73.0,
            73.0,
            73.0,
            74.0,
            74.0,
            74.0,
            74.0,
            75.0,
            75.0,
            75.0,
            75.0,
            76.0,
            76.0,
            76.0,
            76.0,
            77.0,
            77.0,
            77.0,
            77.0,
            78.0,
            78.0,
            78.0,
            78.0,
            79.0,
            79.0,
            79.0,
            79.0,
            80.0,
            80.0,
            80.0,
            80.0,
            81.0,
            81.0,
            81.0,
            81.0,
            82.0,
            82.0,
            82.0,
            82.0,
            83.0,
            83.0,
            83.0,
            83.0,
            84.0,
            84.0,
            84.0,
            84.0,
            85.0,
            85.0,
            85.0,
            85.0,
            86.0,
            86.0,
            86.0,
            86.0,
            87.0,
            87.0,
            87.0,
            87.0,
            88.0,
            88.0,
            88.0,
            88.0,
            89.0,
            89.0,
            89.0,
            89.0,
            90.0,
            90.0,
            90.0,
            90.0,
            91.0,
            91.0,
            91.0,
            91.0,
            92.0,
            92.0,
            92.0,
            92.0,
            93.0,
            93.0,
            93.0,
            93.0,
            94.0,
            94.0,
            94.0,
            94.0,
            95.0,
            95.0,
            95.0,
            95.0,
            96.0,
            96.0,
            96.0,
            96.0,
            97.0,
            97.0,
            97.0,
            97.0,
            98.0,
            98.0,
            98.0,
            98.0,
            99.0,
            99.0,
            99.0,
            99.0,
            100.0,
            100.0,
            100.0,
            100.0,
            101.0,
            101.0,
            101.0,
            101.0,
            102.0,
            102.0,
            102.0,
            102.0,
            103.0,
            103.0,
            103.0,
            103.0,
            104.0,
            104.0,
            104.0,
            104.0,
            105.0,
            105.0,
            105.0,
            105.0,
            106.0,
            106.0,
            106.0,
            106.0,
            107.0,
            107.0,
            107.0,
            107.0,
            108.0,
            108.0,
            108.0,
            108.0,
            109.0,
            109.0,
            109.0,
            109.0,
            110.0,
            110.0,
            110.0,
            110.0,
            111.0,
            111.0,
            111.0,
            111.0,
            112.0,
            112.0,
            112.0,
            112.0,
            113.0,
            113.0,
            113.0,
            113.0,
            114.0,
            114.0,
            114.0,
            114.0,
            115.0,
            115.0,
            115.0,
            115.0,
            116.0,
            116.0,
            116.0,
            116.0,
            117.0,
            117.0,
            117.0,
            117.0,
            118.0,
            118.0,
            118.0,
            118.0,
            119.0,
            119.0,
            119.0,
            119.0,
        ],
        dtype=np.float32,
    )

    cols_expected = np.array(
        [
            7.0,
            6.0,
            1.0,
            0.0,
            7.0,
            6.0,
            1.0,
            0.0,
            7.0,
            6.0,
            1.0,
            0.0,
            7.0,
            6.0,
            1.0,
            0.0,
            7.0,
            6.0,
            1.0,
            0.0,
            7.0,
            6.0,
            1.0,
            0.0,
            8.0,
            7.0,
            2.0,
            1.0,
            8.0,
            7.0,
            2.0,
            1.0,
            8.0,
            7.0,
            2.0,
            1.0,
            8.0,
            7.0,
            2.0,
            1.0,
            8.0,
            7.0,
            2.0,
            1.0,
            8.0,
            7.0,
            2.0,
            1.0,
            9.0,
            8.0,
            3.0,
            2.0,
            9.0,
            8.0,
            3.0,
            2.0,
            9.0,
            8.0,
            3.0,
            2.0,
            9.0,
            8.0,
            3.0,
            2.0,
            9.0,
            8.0,
            3.0,
            2.0,
            9.0,
            8.0,
            3.0,
            2.0,
            10.0,
            9.0,
            4.0,
            3.0,
            10.0,
            9.0,
            4.0,
            3.0,
            10.0,
            9.0,
            4.0,
            3.0,
            10.0,
            9.0,
            4.0,
            3.0,
            10.0,
            9.0,
            4.0,
            3.0,
            10.0,
            9.0,
            4.0,
            3.0,
            11.0,
            10.0,
            5.0,
            4.0,
            11.0,
            10.0,
            5.0,
            4.0,
            11.0,
            10.0,
            5.0,
            4.0,
            11.0,
            10.0,
            5.0,
            4.0,
            11.0,
            10.0,
            5.0,
            4.0,
            11.0,
            10.0,
            5.0,
            4.0,
            13.0,
            12.0,
            7.0,
            6.0,
            13.0,
            12.0,
            7.0,
            6.0,
            13.0,
            12.0,
            7.0,
            6.0,
            13.0,
            12.0,
            7.0,
            6.0,
            13.0,
            12.0,
            7.0,
            6.0,
            13.0,
            12.0,
            7.0,
            6.0,
            14.0,
            13.0,
            8.0,
            7.0,
            14.0,
            13.0,
            8.0,
            7.0,
            14.0,
            13.0,
            8.0,
            7.0,
            14.0,
            13.0,
            8.0,
            7.0,
            14.0,
            13.0,
            8.0,
            7.0,
            14.0,
            13.0,
            8.0,
            7.0,
            15.0,
            14.0,
            9.0,
            8.0,
            15.0,
            14.0,
            9.0,
            8.0,
            15.0,
            14.0,
            9.0,
            8.0,
            15.0,
            14.0,
            9.0,
            8.0,
            15.0,
            14.0,
            9.0,
            8.0,
            15.0,
            14.0,
            9.0,
            8.0,
            16.0,
            15.0,
            10.0,
            9.0,
            16.0,
            15.0,
            10.0,
            9.0,
            16.0,
            15.0,
            10.0,
            9.0,
            16.0,
            15.0,
            10.0,
            9.0,
            16.0,
            15.0,
            10.0,
            9.0,
            16.0,
            15.0,
            10.0,
            9.0,
            17.0,
            16.0,
            11.0,
            10.0,
            17.0,
            16.0,
            11.0,
            10.0,
            17.0,
            16.0,
            11.0,
            10.0,
            17.0,
            16.0,
            11.0,
            10.0,
            17.0,
            16.0,
            11.0,
            10.0,
            17.0,
            16.0,
            11.0,
            10.0,
            19.0,
            18.0,
            13.0,
            12.0,
            19.0,
            18.0,
            13.0,
            12.0,
            19.0,
            18.0,
            13.0,
            12.0,
            19.0,
            18.0,
            13.0,
            12.0,
            19.0,
            18.0,
            13.0,
            12.0,
            19.0,
            18.0,
            13.0,
            12.0,
            20.0,
            19.0,
            14.0,
            13.0,
            20.0,
            19.0,
            14.0,
            13.0,
            20.0,
            19.0,
            14.0,
            13.0,
            20.0,
            19.0,
            14.0,
            13.0,
            20.0,
            19.0,
            14.0,
            13.0,
            20.0,
            19.0,
            14.0,
            13.0,
            21.0,
            20.0,
            15.0,
            14.0,
            21.0,
            20.0,
            15.0,
            14.0,
            21.0,
            20.0,
            15.0,
            14.0,
            21.0,
            20.0,
            15.0,
            14.0,
            21.0,
            20.0,
            15.0,
            14.0,
            21.0,
            20.0,
            15.0,
            14.0,
            22.0,
            21.0,
            16.0,
            15.0,
            22.0,
            21.0,
            16.0,
            15.0,
            22.0,
            21.0,
            16.0,
            15.0,
            22.0,
            21.0,
            16.0,
            15.0,
            22.0,
            21.0,
            16.0,
            15.0,
            22.0,
            21.0,
            16.0,
            15.0,
            23.0,
            22.0,
            17.0,
            16.0,
            23.0,
            22.0,
            17.0,
            16.0,
            23.0,
            22.0,
            17.0,
            16.0,
            23.0,
            22.0,
            17.0,
            16.0,
            23.0,
            22.0,
            17.0,
            16.0,
            23.0,
            22.0,
            17.0,
            16.0,
            25.0,
            24.0,
            19.0,
            18.0,
            25.0,
            24.0,
            19.0,
            18.0,
            25.0,
            24.0,
            19.0,
            18.0,
            25.0,
            24.0,
            19.0,
            18.0,
            25.0,
            24.0,
            19.0,
            18.0,
            25.0,
            24.0,
            19.0,
            18.0,
            26.0,
            25.0,
            20.0,
            19.0,
            26.0,
            25.0,
            20.0,
            19.0,
            26.0,
            25.0,
            20.0,
            19.0,
            26.0,
            25.0,
            20.0,
            19.0,
            26.0,
            25.0,
            20.0,
            19.0,
            26.0,
            25.0,
            20.0,
            19.0,
            27.0,
            26.0,
            21.0,
            20.0,
            27.0,
            26.0,
            21.0,
            20.0,
            27.0,
            26.0,
            21.0,
            20.0,
            27.0,
            26.0,
            21.0,
            20.0,
            27.0,
            26.0,
            21.0,
            20.0,
            27.0,
            26.0,
            21.0,
            20.0,
            28.0,
            27.0,
            22.0,
            21.0,
            28.0,
            27.0,
            22.0,
            21.0,
            28.0,
            27.0,
            22.0,
            21.0,
            28.0,
            27.0,
            22.0,
            21.0,
            28.0,
            27.0,
            22.0,
            21.0,
            28.0,
            27.0,
            22.0,
            21.0,
            29.0,
            28.0,
            23.0,
            22.0,
            29.0,
            28.0,
            23.0,
            22.0,
            29.0,
            28.0,
            23.0,
            22.0,
            29.0,
            28.0,
            23.0,
            22.0,
            29.0,
            28.0,
            23.0,
            22.0,
            29.0,
            28.0,
            23.0,
            22.0,
        ],
        dtype=np.float32,
    )

    np.testing.assert_allclose(data, data_expected, rtol=RTOL)
    np.testing.assert_allclose(cols, cols_expected, rtol=RTOL)
    np.testing.assert_allclose(rows, rows_expected, rtol=RTOL)
